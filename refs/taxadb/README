
You will need to load the latest sqlite so add this to you .bash_profile
An older version is loaded by default, but will error "Error: file is encrypted or is not a database"

module load sqlite


I have created just the "gb" version as it included everything that I searched for. Should you ever need something and its accession number is not found, please let me know and I'll create a different one.






Download everything and then make a several databases with subsets of everything.
In general, smaller databases search faster.
```
nohup taxadb download --outdir taxadb_full --type full -f &

nohup taxadb create --dbtype sqlite --fast -i taxadb_full --dbname taxadb_gb.sqlite   --division gb &
nohup taxadb create --dbtype sqlite --fast -i taxadb_full --dbname taxadb_nucl.sqlite --division nucl &
nohup taxadb create --dbtype sqlite --fast -i taxadb_full --dbname taxadb_prot.sqlite --division prot &
nohup taxadb create --dbtype sqlite --fast -i taxadb_full --dbname taxadb_full.sqlite --division full &
```





A "simple" command like ...

```
sqlite3 /francislab/data1/refs/taxadb/taxadb_gb.sqlite  "select a.accession, t1.ncbi_taxid, t1.tax_name, t1.lineage_level, t2.ncbi_taxid, t2.tax_name, t2.lineage_level, t3.ncbi_taxid, t3.tax_name, t3.lineage_level, t4.ncbi_taxid, t4.tax_name, t4.lineage_level, t5.ncbi_taxid, t5.tax_name, t5.lineage_level, t6.ncbi_taxid, t6.tax_name, t6.lineage_level from accession a join taxa t1 on t1.ncbi_taxid = a.taxid_id join taxa t2 on t2.ncbi_taxid = t1.parent_taxid join taxa t3 on t3.ncbi_taxid = t2.parent_taxid join taxa t4 on t4.ncbi_taxid = t3.parent_taxid join taxa t5 on t5.ncbi_taxid = t4.parent_taxid join taxa t6 on t6.ncbi_taxid = t5.parent_taxid where a.accession = 'NC_006273'"

sqlite3 /francislab/data1/refs/taxadb/taxadb_prot.sqlite  "select a.accession, t1.ncbi_taxid, t1.tax_name, t1.lineage_level, t2.ncbi_taxid, t2.tax_name, t2.lineage_level, t3.ncbi_taxid, t3.tax_name, t3.lineage_level, t4.ncbi_taxid, t4.tax_name, t4.lineage_level, t5.ncbi_taxid, t5.tax_name, t5.lineage_level, t6.ncbi_taxid, t6.tax_name, t6.lineage_level from accession a join taxa t1 on t1.ncbi_taxid = a.taxid_id join taxa t2 on t2.ncbi_taxid = t1.parent_taxid join taxa t3 on t3.ncbi_taxid = t2.parent_taxid join taxa t4 on t4.ncbi_taxid = t3.parent_taxid join taxa t5 on t5.ncbi_taxid = t4.parent_taxid join taxa t6 on t6.ncbi_taxid = t5.parent_taxid where a.accession = 'YP_001129440'"
```

Will output more info than you might need. Feel free to modify.

NC_006273|10359|Human betaherpesvirus 5|species|10358|Cytomegalovirus|genus|10357|Betaherpesvirinae|subfamily|10292|Herpesviridae|family|548681|Herpesvirales|order|10239|Viruses|superkingdom



I have now created 3 versions of this database.

Small databases search faster than larger one so to optimize, choose the one that you need.

Protein accession numbers won't be in taxadb_gb.

NC accession numbers won't be in taxadb_prot.

sqlite3 /francislab/data1/refs/taxadb/taxadb_gb.sqlite  "select * from accession where accession = 'NC_006273'"

sqlite3 /francislab/data1/refs/taxadb/taxadb_prot.sqlite  "select * from accession where accession = 'YP_001129440'"

sqlite3 /francislab/data1/refs/taxadb/taxadb_full.sqlite  "select * from accession where accession = 'NC_006273'"
sqlite3 /francislab/data1/refs/taxadb/taxadb_full.sqlite  "select * from accession where accession = 'YP_001129440'"


Note that accession numbers DO NOT include the version suffix.







##################################################
#
#	20200429 - Add data extracted from nr database
#

sqlite3 taxadb_full_nr.sqlite "CREATE TABLE nr ( accession VARCHAR NOT NULL, taxid_id INTEGER NOT NULL, sciname VARCHAR NOT NULL, blastname VARCHAR NOT NULL, superkingdon VARCHAR NOT NULL  FOREIGN KEY ("taxid_id") REFERENCES "taxa" ("ncbi_taxid")); CREATE UNIQUE INDEX ix ON nr(accession);"

#	sciname, blastname and superkingdom are unnecessary and could be removed if to large

sqlite3 taxadb_full_nr.sqlite -cmd '.separator "---"' ".import nr.aTSBK.sorted.txt nr"
Error: multi-character column separators not allowed for import

NR data contained pipes, quotes and commas. 

cat nr.aTSBK.sorted.txt | python -c "import sys; import pandas as pd; pd.read_csv(sys.stdin, header=None, sep='---',engine='python').to_csv(sys.stdout,header=False,index=False,sep=',')" > nr.aTSBK.sorted.csv

nohup python -c "import pandas as pd; pd.read_csv('nr.aTSBK.sorted.txt', header=None, sep='---',engine='python').to_csv('nr.aTSBK.sorted.csv',header=False,index=False,sep=',')" &

sqlite3 taxadb_full_nr.sqlite -cmd '.separator ","' ".import nr.aTSBK.sorted.csv nr"



Just going to use the accession and taxid. Could have just extracted those at the beginning.

cat nr.aTSBK.sorted.txt | awk 'BEGIN{FS="---";OFS=","}{split($1,a,".");print a[1],$2}' > nr.aT.csv

sqlite3 taxadb_full_nr.sqlite "CREATE TABLE nr ( accession VARCHAR NOT NULL, taxid_id INTEGER NOT NULL, FOREIGN KEY ("taxid_id") REFERENCES "taxa" ("ncbi_taxid")); CREATE UNIQUE INDEX ix ON nr(accession);"
sqlite3 taxadb_full_nr.sqlite -cmd '.separator ","' ".import nr.aT.csv nr"



nr.aT.csv:230402316: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:230404842: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:278392676: expected 2 columns but found 3 - extras ignored
nr.aT.csv:278394440: expected 2 columns but found 5 - extras ignored
nr.aT.csv:278399807: expected 2 columns but found 3 - extras ignored
nr.aT.csv:278401630: expected 2 columns but found 3 - extras ignored

The UNIQUE failures are ok as they just stop a duplicate entry.
The other 4 are due to commas in accession numbers.


[gwendt@cclc01 /francislab/data1/refs/taxadb]$ tail -n +230402316 nr.aTSBK.sorted.txt | head -1
NP_001148592.2---4577---Zea mays---monocots---Eukaryota

[gwendt@n38 /scratch/gwendt]$ grep -n "^NP_001148592" nr.aTSBK.sorted.txt 
230402315:NP_001148592.1---4577---Zea mays---monocots---Eukaryota
230402316:NP_001148592.2---4577---Zea mays---monocots---Eukaryota

[gwendt@n38 /scratch/gwendt]$ tail -n +278392676 nr.aTSBK.sorted.txt | head -1
prf||0403181A:PDB=1BP2,2BPP---9913---Bos taurus---even-toed ungulates---Eukaryota

[gwendt@n38 /scratch/gwendt]$ tail -n +278394440 nr.aTSBK.sorted.txt | head 
prf||0706243A:PDB=1HOE,2AIT,3AIT,4AIT---1932---Streptomyces tendae---high GC Gram+---Bacteria

[gwendt@n38 /scratch/gwendt]$ tail -n +278399807 nr.aTSBK.sorted.txt | head 
prf||1309311A:PDB=1EMD,2CMD---562---Escherichia coli---enterobacteria---Bacteria

[gwendt@n38 /scratch/gwendt]$ tail -n +278401630 nr.aTSBK.sorted.txt | head 
prf||1513188A:PDB=1BBC,1POD---9606---Homo sapiens---primates---Eukaryota

Just those 4
awk -F"---" '{print $1}' nr.aTSBK.sorted.txt | grep ,
prf||0403181A:PDB=1BP2,2BPP
prf||0706243A:PDB=1HOE,2AIT,3AIT,4AIT
prf||1309311A:PDB=1EMD,2CMD
prf||1513188A:PDB=1BBC,1POD



diff nr.aT*csv
278392676c278392676
< prf||0403181A,9913
---
> prf||0403181A:PDB=1BP2,2BPP,9913
278392713c278392713
< prf||0407244A,9606
---
> prf||0407244A:PDB=1GF2,9606
278394440c278394440
< prf||0706243A,1932
---
> prf||0706243A:PDB=1HOE,2AIT,3AIT,4AIT,1932
278394454c278394454
< prf||0707237A,9913
---
> prf||0707237A:PDB=3ICB,9913
278394506c278394506
< prf||0710290A,9825
---
> prf||0710290A:PDB=1CTS,9825
278395065c278395065
< prf||0801257A,12054
---
> prf||0801257A:PDB=2STV,12054
278395179c278395179
< prf||0807298A,4932
---
> prf||0807298A:PDB=3PGM,4932
278395799c278395799
< prf||0902204A,1917
---
> prf||0902204A:PDB=2MCM,1917
278396704c278396704
< prf||1004262A,9825
---
> prf||1004262A:PDB=1C5A,9825
278398645c278398645
< prf||1202232A,10116
---
> prf||1202232A:PDB=1IFC,10116
278399807c278399807
< prf||1309311A,562
---
> prf||1309311A:PDB=1EMD,2CMD,562
278400768c278400768
< prf||1411165A,3649
---
> prf||1411165A:PDB=1PPO,3649
278401630c278401630
< prf||1513188A,9606
---
> prf||1513188A:PDB=1BBC,1POD,9606




Oddly, some accession numbers include ":PDB=....."? Create a better import file.
cat nr.aTSBK.sorted.txt | awk 'BEGIN{FS="---";OFS=","}{split($1,a,".");split(a[1],b,":");print b[1],$2}' > nr.aT.csv

sqlite3 taxadb_full_nr.sqlite "CREATE TABLE nr ( accession VARCHAR NOT NULL, taxid_id INTEGER NOT NULL, FOREIGN KEY ("taxid_id") REFERENCES "taxa" ("ncbi_taxid")); CREATE UNIQUE INDEX ix ON nr(accession);"
sqlite3 taxadb_full_nr.sqlite -cmd '.separator ","' ".import nr.aT.csv nr"

nr.aT.csv:230402316: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:230404842: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:278394440: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:278395065: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:278395179: INSERT failed: UNIQUE constraint failed: nr.accession
nr.aT.csv:278398645: INSERT failed: UNIQUE constraint failed: nr.accession



sqlite3 taxadb_full_nr.sqlite "PRAGMA auto_vacuum = FULL; VACUUM"
Error: database or disk is full

Trying this a different way ...

echo ".dump" | sqlite3 taxadb_full_nr_ORIG.sqlite | sqlite3 taxadb_full_nr_DUMP.sqlite

New database is a bit smaller, but VACUUM failed the same way.

Assuming taxadb_full_nr_DUMP.sqlite is good so renaming sqlite3 taxadb_full_nr.sqlite



For some reason, taxadb does not include all of the data in taxdump?

wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/nucl_gb.accession2taxid.gz
wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/nucl_wgs.accession2taxid.gz
wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz
wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/pdb.accession2taxid.gz

Not sure why so many missing, so I will try to create my own csv files for direct import to database.
Gotta merge nodes.dmp and names.dmp to make the "taxa" table.
The accessions tables is just all of the accession2taxid file.


Found another cool tool. http://etetoolkit.org/



sqlite3 taxadb_full.sqlite
sqlite> .schema
CREATE TABLE IF NOT EXISTS "taxa" ("ncbi_taxid" INTEGER NOT NULL PRIMARY KEY, "parent_taxid" INTEGER NOT NULL, "tax_name" VARCHAR(255) NOT NULL, "lineage_level" VARCHAR(255) NOT NULL);
CREATE TABLE IF NOT EXISTS "accession" ("id" INTEGER NOT NULL PRIMARY KEY, "taxid_id" INTEGER NOT NULL, "accession" VARCHAR(255) NOT NULL, FOREIGN KEY ("taxid_id") REFERENCES "taxa" ("ncbi_taxid"));
CREATE INDEX "accession_taxid_id" ON "accession" ("taxid_id");
CREATE UNIQUE INDEX "accession_accession" ON "accession" ("accession");

select * from taxa where ncbi_taxid = 2717128;








sqlite3 /francislab/data1/refs/taxadb/taxadb_full.sqlite "select a.accession, t1.ncbi_taxid, t1.tax_name, t1.lineage_level, t2.ncbi_taxid, t2.tax_name, t2.lineage_level, t3.ncbi_taxid, t3.tax_name, t3.lineage_level, t4.ncbi_taxid, t4.tax_name, t4.lineage_level, t5.ncbi_taxid, t5.tax_name, t5.lineage_level , t6.ncbi_taxid, t6.tax_name, t6.lineage_level , t7.ncbi_taxid, t7.tax_name, t7.lineage_level , t8.ncbi_taxid, t8.tax_name, t8.lineage_level, t9.ncbi_taxid, t9.tax_name, t9.lineage_level, t10.ncbi_taxid, t10.tax_name, t10.lineage_level from accession a join taxa t1 on t1.ncbi_taxid = a.taxid_id join taxa t2 on t2.ncbi_taxid = t1.parent_taxid join taxa t3 on t3.ncbi_taxid = t2.parent_taxid join taxa t4 on t4.ncbi_taxid = t3.parent_taxid join taxa t5 on t5.ncbi_taxid = t4.parent_taxid join taxa t6 on t6.ncbi_taxid = t5.parent_taxid join taxa t7 on t7.ncbi_taxid = t6.parent_taxid join taxa t8 on t8.ncbi_taxid = t7.parent_taxid join taxa t9 on t9.ncbi_taxid = t8.parent_taxid join taxa t10 on t10.ncbi_taxid = t9.parent_taxid where a.accession IN ( 'NC_006273', 'CP048030','CP031704','NC_001638','NC_023091','NC_039755','NC_039754','NC_033969','NC_027859','NC_028331','NC_042478','NC_009681','NC_002387','NC_000926','NC_041490' )"


sqlite3 -header /francislab/data1/refs/taxadb/taxadb_full.sqlite "select a.accession, iif( t1.lineage_level == 'species',t1.tax_name, iif( t2.lineage_level == 'species',t2.tax_name, iif( t3.lineage_level == 'species',t3.tax_name, iif( t4.lineage_level == 'species',t4.tax_name, iif( t5.lineage_level == 'species',t5.tax_name, iif( t6.lineage_level == 'species',t6.tax_name, iif( t7.lineage_level == 'species',t7.tax_name, iif( t8.lineage_level == 'species',t8.tax_name, iif( t9.lineage_level == 'species',t9.tax_name, 'no species' ))))))))) as species, iif( t1.lineage_level == 'genus',t1.tax_name, iif( t2.lineage_level == 'genus',t2.tax_name, iif( t3.lineage_level == 'genus',t3.tax_name, iif( t4.lineage_level == 'genus',t4.tax_name, iif( t5.lineage_level == 'genus',t5.tax_name, iif( t6.lineage_level == 'genus',t6.tax_name, iif( t7.lineage_level == 'genus',t7.tax_name, iif( t8.lineage_level == 'genus',t8.tax_name, iif( t9.lineage_level == 'genus',t9.tax_name, 'no genus' ))))))))) as genus, iif( t1.lineage_level == 'family',t1.tax_name, iif( t2.lineage_level == 'family',t2.tax_name, iif( t3.lineage_level == 'family',t3.tax_name, iif( t4.lineage_level == 'family',t4.tax_name, iif( t5.lineage_level == 'family',t5.tax_name, iif( t6.lineage_level == 'family',t6.tax_name, iif( t7.lineage_level == 'family',t7.tax_name, iif( t8.lineage_level == 'family',t8.tax_name, iif( t9.lineage_level == 'family',t9.tax_name, 'no family' ))))))))) as family from accession a join taxa t1 on t1.ncbi_taxid = a.taxid_id join taxa t2 on t2.ncbi_taxid = t1.parent_taxid join taxa t3 on t3.ncbi_taxid = t2.parent_taxid join taxa t4 on t4.ncbi_taxid = t3.parent_taxid join taxa t5 on t5.ncbi_taxid = t4.parent_taxid join taxa t6 on t6.ncbi_taxid = t5.parent_taxid join taxa t7 on t7.ncbi_taxid = t6.parent_taxid join taxa t8 on t8.ncbi_taxid = t7.parent_taxid join taxa t9 on t9.ncbi_taxid = t8.parent_taxid join taxa t10 on t10.ncbi_taxid = t9.parent_taxid where a.accession IN ( 'NC_006273', 'CP048030','CP031704','NC_001638','NC_023091','NC_039755','NC_039754','NC_033969','NC_027859','NC_028331','NC_042478','NC_009681','NC_002387','NC_000926','NC_041490' )"





nohup sqlite3 /francislab/data1/refs/taxadb/taxadb_full.sqlite "select a.accession, iif( t1.lineage_level == 'species',t1.tax_name, iif( t2.lineage_level == 'species',t2.tax_name, iif( t3.lineage_level == 'species',t3.tax_name, iif( t4.lineage_level == 'species',t4.tax_name, iif( t5.lineage_level == 'species',t5.tax_name, iif( t6.lineage_level == 'species',t6.tax_name, iif( t7.lineage_level == 'species',t7.tax_name, iif( t8.lineage_level == 'species',t8.tax_name, iif( t9.lineage_level == 'species',t9.tax_name, 'no species' ))))))))) as species, iif( t1.lineage_level == 'genus',t1.tax_name, iif( t2.lineage_level == 'genus',t2.tax_name, iif( t3.lineage_level == 'genus',t3.tax_name, iif( t4.lineage_level == 'genus',t4.tax_name, iif( t5.lineage_level == 'genus',t5.tax_name, iif( t6.lineage_level == 'genus',t6.tax_name, iif( t7.lineage_level == 'genus',t7.tax_name, iif( t8.lineage_level == 'genus',t8.tax_name, iif( t9.lineage_level == 'genus',t9.tax_name, 'no genus' ))))))))) as genus, iif( t1.lineage_level == 'family',t1.tax_name, iif( t2.lineage_level == 'family',t2.tax_name, iif( t3.lineage_level == 'family',t3.tax_name, iif( t4.lineage_level == 'family',t4.tax_name, iif( t5.lineage_level == 'family',t5.tax_name, iif( t6.lineage_level == 'family',t6.tax_name, iif( t7.lineage_level == 'family',t7.tax_name, iif( t8.lineage_level == 'family',t8.tax_name, iif( t9.lineage_level == 'family',t9.tax_name, 'no family' ))))))))) as family from accession a join taxa t1 on t1.ncbi_taxid = a.taxid_id join taxa t2 on t2.ncbi_taxid = t1.parent_taxid join taxa t3 on t3.ncbi_taxid = t2.parent_taxid join taxa t4 on t4.ncbi_taxid = t3.parent_taxid join taxa t5 on t5.ncbi_taxid = t4.parent_taxid join taxa t6 on t6.ncbi_taxid = t5.parent_taxid join taxa t7 on t7.ncbi_taxid = t6.parent_taxid join taxa t8 on t8.ncbi_taxid = t7.parent_taxid join taxa t9 on t9.ncbi_taxid = t8.parent_taxid join taxa t10 on t10.ncbi_taxid = t9.parent_taxid" > taxadb_full.sqlite.accession_species_genus_family &




CREATE TABLE IF NOT EXISTS "asgf" ("id" INTEGER NOT NULL PRIMARY KEY, "accession" VARCHAR(255) NOT NULL, "species" VARCHAR(255) NOT NULL, "genus" VARCHAR(255) NOT NULL, "family" VARCHAR(255) NOT NULL );

sqlite3 asgf.sqlite "CREATE TABLE IF NOT EXISTS "asgf" ("accession" VARCHAR(255) NOT NULL PRIMARY KEY, "species" VARCHAR(255) NOT NULL, "genus" VARCHAR(255) NOT NULL, "family" VARCHAR(255) NOT NULL ); CREATE UNIQUE INDEX "asgf_accession" ON "asgf" ("accession");"

DEFAULT - -cmd '.separator "|"' 
SAME_AS --separator "|"

nohup sqlite3 asgf.sqlite ".import taxadb_full.sqlite.accession_species_genus_family asgf" &






module load sqlite


sqlite3 tmp.sqlite 'CREATE TABLE query ( qaccver, saccver, pident, length, mismatch, gapopen, qstart, qend, sstart, send, evalue, bitscore); CREATE INDEX "qacc" ON "query"("saccver");'

zcat 25.bbduk2.unpaired.diamond.nr.txt.gz | sqlite3 tmp.sqlite -separator $'\t' ".import /dev/stdin query"

cat 25.bbduk2.unpaired.diamond.nr.txt.gz.head | sqlite3 tmp.sqlite -separator $'\t' ".import /dev/stdin query"

sqlite3 -csv -separator $'\t' -cmd ".output stdout" tmp.sqlite "SELECT q.*, a.species, a.genus, a.family FROM query q LEFT JOIN asgf a ON a.accession = SUBSTR(q.saccver,0,INSTR(q.saccver,'.'));"

sqlite3 -separator $'\t' -cmd ".mode tabs" -cmd ".output stdout" tmp.sqlite "SELECT q.*, a.species, a.genus, a.family FROM query q LEFT JOIN asgf a ON a.accession = SUBSTR(q.saccver,0,INSTR(q.saccver,'.'));"


This seems to work best. "-csv" will quote fields with spaces even though unnecessary.

sqlite3 -cmd ".mode tabs" -cmd ".output stdout" tmp.sqlite "SELECT q.*, a.species, a.genus, a.family FROM query q LEFT JOIN asgf a ON a.accession = SUBSTR(q.saccver,0,INSTR(q.saccver,'.'));" | gzip > output.gz




sqlite3 tmp.sqlite 'CREATE TABLE query ( qaccver, saccver, pident, length, mismatch, gapopen, qstart, qend, sstart, send, evalue, bitscore);'

time zcat 25.bbduk2.unpaired.diamond.nr.txt.gz | sqlite3 tmp.sqlite -separator $'\t' ".import /dev/stdin query"

real	7m50.172s
user	7m3.561s
sys	0m33.525s

time sqlite3 -cmd ".mode tabs" -cmd ".output stdout" tmp.sqlite "SELECT q.*, a.species, a.genus, a.family FROM query q LEFT JOIN asgf a ON a.accession = SUBSTR(q.saccver,0,INSTR(q.saccver,'.'));" | gzip > output.gz

real	140m45.028s
user	20m59.422s
sys	16m46.185s



