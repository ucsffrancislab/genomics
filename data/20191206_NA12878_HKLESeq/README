

Add "machine gslanalyzer.qb3.berkeley.edu login ########## password ##########" to ~/.netrc

Then DO NOT USE the "ftp://" prefix or "-u username,password" in command 



lftp -e 'set ssl:verify-certificate no set ftp:ssl-protect-data true set ftp:ssl-force true' gslanalyzer.qb3.berkeley.edu:990



So I put the username and password into my ~/.netrc and then downloaded all data.

lftp -c 'set ssl:verify-certificate no set ftp:ssl-protect-data true set ftp:ssl-force true; open -e "mirror -c; quit" gslanalyzer.qb3.berkeley.edu:990'


I counted the raw bases to ensure that we don't have a repeat of last time, and we don't.


zcat SFSP003_S1_L001_R1_001.fastq.gz | paste -d "\t" - - - - | cut -f 2 | awk '{split($0,a,"");for(i in a){c[a[i]]++}}END{for(i in c){print(i" : "c[i])}}' > R1.base_counts.txt
N : 7919
A : 57727266
C : 53311136
T : 44407118
G : 37585867

zcat SFSP003_S1_L001_R2_001.fastq.gz | paste -d "\t" - - - - | cut -f 2 | awk '{split($0,a,"");for(i in a){c[a[i]]++}}END{for(i in c){print(i" : "c[i])}}' > R2.base_counts.txt
N : 10936
A : 59385649
C : 35812150
T : 40544524
G : 57286047





NOTE: Should have ended the name with the lane instead (for chimera) .R1.fastq.gz





I re-demultiplexed, umitagged and consolidated the reads with our copy of areelab/umi

mkdir aryeelab
cd aryeelab

python ~/github/ucsffrancislab/umi/demultiplex.py --min_reads 100 --read1 ../SFSP003_S1_L001_R1_001.fastq.gz --read2 ../SFSP003_S1_L001_R2_001.fastq.gz --index1 ../SFSP003_S1_L001_I1_001.fastq.gz --index2 ../SFSP003_S1_L001_I2_001.fastq.gz --sample_barcodes ../sampleindexes.txt --max_hamming 1

for r1 in ?.r1.fastq ??.r1.fastq ; do
base=${r1%.r1.fastq}
echo ${base}
python ~/github/ucsffrancislab/umi/umitag.py \
--read1_in ${base}.r1.fastq \
--read2_in ${base}.r2.fastq \
--read1_out ${base}.umitagged.r1.fastq \
--read2_out ${base}.umitagged.r2.fastq \
--index1 ${base}.i1.fastq \
--index2 ${base}.i2.fastq
done

for r1 in *.r1.umitagged.fastq ; do
base=${r1%.umitagged.r1.fastq}
python ~/github/ucsffrancislab/umi/consolidate.py ${base}.umitagged.r1.fastq ${base}.consolidated.r1..fastq 15 0.9
python ~/github/ucsffrancislab/umi/consolidate.py ${base}.umitagged.r2.fastq ${base}.consolidated.r2.fastq 15 0.9
done



I then ran sickle to trim on quality


for r1 in *.consolidated.r1.fastq ; do
r2=${r1/r1/r2}
base=${r1%.consolidated.r1.fastq}
~/github/najoshi/sickle/sickle pe -f ${r1} -r ${r2} -t sanger -o ${base}.sickle.r1.fastq -p ${base}.sickle.r2.fastq -s ${base}.sickle.si.fastq > ${base}.sickle.out
done



I then ran chimera on all of the SVAs and HERVs in hg38 with and without all of the alternates.


chimera.bash --human hg38 --viral SVAs_and_HERVs_KWHE --threads 4 *.sickle.r?.fastq.gz &
mv working_dir chimera_hg38_SVAs_and_HERVs_KWHE
tail -n +2 chimera_hg38_SVAs_and_HERVs_KWHE/unpaired_insertion_points_table.hg38.Q20.sorted.csv | awk -F\| '{print $1":"$2}' | sort > chimera_hg38_SVAs_and_HERVs_KWHE.insertion_points

chimera.bash --human hg38_no_alts --viral SVAs_and_HERVs_KWHE --threads 4 *.sickle.r?.fastq.gz &
mv working_dir chimera_hg38_no_alts_SVAs_and_HERVs_KWHE
tail -n +2 chimera_hg38_no_alts_SVAs_and_HERVs_KWHE/unpaired_insertion_points_table.hg38_no_alts.Q20.sorted.csv | awk -F\| '{print $1":"$2}' | sort > chimera_hg38_no_alts_SVAs_and_HERVs_KWHE.insertion_points



Previously, I had run aligned all of the SVAs and HERVs to hg38, with and without alternates, to get a good list of all of their positions in the reference.


ls -1 ~/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38*
/Users/jakewendt/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38.vs.sam.gz
/Users/jakewendt/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38.vsl.sam.gz
/Users/jakewendt/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38_no_alts.vs.sam.gz
/Users/jakewendt/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.sam.gz

I extracted all of these positions 

for sam in ~/github/unreno/aligned/20180410/SVAs_and_HERVs_KWHE.hg38* ; do
base=$( basename ${sam} .sam.gz )
samtools view ${sam} | awk '{print $3":"$4}' | sort | uniq > ${base}.positions
done


and counted them.

for f in *positions *points ; do wc -l $f; done
  618 SVAs_and_HERVs_KWHE.hg38.vs.positions
59555 SVAs_and_HERVs_KWHE.hg38.vsl.positions
  561 SVAs_and_HERVs_KWHE.hg38_no_alts.vs.positions
56259 SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.positions
 2087 chimera_hg38_SVAs_and_HERVs_KWHE.insertion_points
 2120 chimera_hg38_no_alts_SVAs_and_HERVs_KWHE.insertion_points



I then "rounded" to 1,000 and 10,000 to "group" them, uniqued and sorted these positions, as well as the insertion points found by chimera


for pos in *positions *points ; do
sed -E 's/[[:digit:]]{3}$/000/' ${pos} | uniq | sort > ${pos}.1k
sed -E 's/[[:digit:]]{4}$/0000/' ${pos} | uniq | sort > ${pos}.10k
done


And then counted them

for f in *.1*k ; do wc -l $f ; done
  438 SVAs_and_HERVs_KWHE.hg38.vs.positions.1k
31320 SVAs_and_HERVs_KWHE.hg38.vsl.positions.1k
  404 SVAs_and_HERVs_KWHE.hg38_no_alts.vs.positions.1k
29599 SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.positions.1k
 1095 chimera_hg38_SVAs_and_HERVs_KWHE.insertion_points.1k
 1110 chimera_hg38_no_alts_SVAs_and_HERVs_KWHE.insertion_points.1k

  414 SVAs_and_HERVs_KWHE.hg38.vs.positions.10k
25188 SVAs_and_HERVs_KWHE.hg38.vsl.positions.10k
  386 SVAs_and_HERVs_KWHE.hg38_no_alts.vs.positions.10k
23824 SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.positions.10k
 1071 chimera_hg38_SVAs_and_HERVs_KWHE.insertion_points.10k
 1085 chimera_hg38_no_alts_SVAs_and_HERVs_KWHE.insertion_points.10k



I then compared the corresponding lists ...


for r in 1k 10k ; do
for ref in hg38 hg38_no_alts ; do
for pos in *.${ref}.*.positions.${r} ; do
echo $pos
comm -12 chimera_${ref}_SVAs_and_HERVs_KWHE.insertion_points.${r} ${pos} | wc -l > ${pos}.same
done ; done ; done



And counted those positions that are the same


for f in *.1k.same *.10k.same ; do c=$( cat $f ); echo $c $f ; done

  84 SVAs_and_HERVs_KWHE.hg38.vs.positions.1k.same
 728 SVAs_and_HERVs_KWHE.hg38.vsl.positions.1k.same
  85 SVAs_and_HERVs_KWHE.hg38_no_alts.vs.positions.1k.same
 735 SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.positions.1k.same

 145 SVAs_and_HERVs_KWHE.hg38.vs.positions.10k.same
1021 SVAs_and_HERVs_KWHE.hg38.vsl.positions.10k.same
 149 SVAs_and_HERVs_KWHE.hg38_no_alts.vs.positions.10k.same
1035 SVAs_and_HERVs_KWHE.hg38_no_alts.vsl.positions.10k.same




When rounded to 10,000, nearly all are found when the reference is aligned "locally".























Align to all refs?

for r1 in *.sickle.r1.fastq ; do
r2=${r1/r1/r2}
si=${r1/r1/si}
base=${r1%.sickle.r1.fastq}
for ref in hg38 NA12878 SVAs_and_HERVs_KWHE ; do
bowtie2 --threads 4 --very-sensitive-local -x ${ref} -U ${r1},${r2},${si} | samtools view -o ${base}.${ref}.bam
done
done

Re-Demultiplex with just i7? Not i5?


Swapping name and lane for chimera, although kinda pointless now.

for r in r1 r2 ; do
for s in sickle umitagged consolidated ; do
rename ${r}.${s} ${s}.${r} *${r}.${s}.fastq.gz
done ; done


for r1 in *.sickle.r1.fastq.gz ; do
r2=${r1/r1/r2}
base=${r1%.sickle.r1.fastq.gz}
ref=SVAs_and_HERVs_KWHE

bowtie2 --threads 4 --very-sensitive-local -x ${ref} -1 ${r1} -2 ${r2} > ${base}.bowtie2.${ref}.p.loc.sam 2> ${base}.bowtie2.${ref}.p.loc.err.txt
samtools sort -o ${base}.bowtie2.${ref}.p.loc.bam ${base}.bowtie2.${ref}.p.loc.sam
rm -f ${base}.bowtie2.${ref}.p.loc.sam
samtools index ${base}.bowtie2.${ref}.p.loc.bam

bowtie2 --threads 4 --very-sensitive -x ${ref} -1 ${r1} -2 ${r2} > ${base}.bowtie2.${ref}.p.e2e.sam 2> ${base}.bowtie2.${ref}.p.e2e.err.txt
samtools sort -o ${base}.bowtie2.${ref}.p.e2e.bam ${base}.bowtie2.${ref}.p.e2e.sam
rm -f ${base}.bowtie2.${ref}.p.e2e.sam
samtools index ${base}.bowtie2.${ref}.p.e2e.bam

bowtie2 --threads 4 --very-sensitive -x ${ref} -U ${r1},${r2} > ${base}.bowtie2.${ref}.u.e2e.sam 2> ${base}.bowtie2.${ref}.u.e2e.err.txt
samtools sort -o ${base}.bowtie2.${ref}.u.e2e.bam ${base}.bowtie2.${ref}.u.e2e.sam
rm -f ${base}.bowtie2.${ref}.u.e2e.sam
samtools index ${base}.bowtie2.${ref}.u.e2e.bam

for ref in hg38 NA12878 ; do
bowtie2 --threads 4 --very-sensitive -x ${ref} -1 ${r1} -2 ${r2} > ${base}.bowtie2.${ref}.p.e2e.sam 2> ${base}.bowtie2.${ref}.p.e2e.err.txt
samtools sort -o ${base}.bowtie2.${ref}.p.e2e.bam ${base}.bowtie2.${ref}.p.e2e.sam
rm -f ${base}.bowtie2.${ref}.p.e2e.sam
samtools index ${base}.bowtie2.${ref}.p.e2e.bam
done
done




tar cfv - SVAs_and_HERVs_KWHE.fasta* *bowtie2.SVAs_and_HERVs_KWHE.* | gzip > 20191219_NA12878_HKLE_bowtie2_SVAs_and_HERVs_KWHE.tar.gz














Create Table

for base in . .consolidated. .sickle. ; do
echo $base
for r1 in {?,??}${base}r1.fastq.gz ; do
echo $r1
zcat ${r1} | paste -d "\t" - - - - | wc -l > ${r1}.read_count
done
done

for d in chimera_hg38_SVAs_and_HERVs_KWHE/*.r1.sickle ; do
i=$( basename $d .r1.sickle )
cat $d/*.paired.*.Q20.*points | sort | uniq | wc -l > ${i}.paired.Q20.insertion_points_count
cat $d/*.unpaired.*.Q20.*points | sort | uniq | wc -l > ${i}.unpaired.Q20.insertion_points_count
cat $d/*.paired.*.Q10.*points | sort | uniq | wc -l > ${i}.paired.Q10.insertion_points_count
cat $d/*.unpaired.*.Q10.*points | sort | uniq | wc -l > ${i}.unpaired.Q10.insertion_points_count
cat $d/*.paired.*.Q00.*points | sort | uniq | wc -l > ${i}.paired.Q00.insertion_points_count
cat $d/*.unpaired.*.Q00.*points | sort | uniq | wc -l > ${i}.unpaired.Q00.insertion_points_count
done


SVAs_and_HERVs_KWHE p loc aligned
SVAs_and_HERVs_KWHE p e2e aligned
SVAs_and_HERVs_KWHE u e2e aligned



echo "Sample #, raw paired read count, consolidated paired read count, sickle paired read count, paired endtoend concordant aligned, paired endtoend discordant aligned, paired endtoend individual reads aligned, paired local concordant aligned, paired local discordant aligned, paired local individual reads aligned, unpaired endtoend individual reads aligned, chimera Q20 paired insertion points found, chimera Q20 unpaired insertion points found, chimera Q10 paired insertion points found, chimera Q10 unpaired insertion points found, chimera Q00 paired insertion points found, chimera Q00 unpaired insertion points found" > HKLEPrimerAnalysisComplete.csv
for i in $( seq 1 36 ) ; do
if [ -e ${i}.sickle.r1.fastq.gz ] ; then
echo -n $i
echo -n ,$( cat ${i}.r1.fastq.gz.read_count )
echo -n ,$( cat ${i}.consolidated.r1.fastq.gz.read_count )
echo -n ,$( cat ${i}.sickle.r1.fastq.gz.read_count )
echo -n ,$( awk '(/aligned con.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$( awk '(/aligned dis.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$( awk '(/aligned con.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$( awk '(/aligned dis.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.u.e2e.err.txt )
echo -n ,$( cat ${i}.paired.Q20.insertion_points_count )
echo -n ,$( cat ${i}.unpaired.Q20.insertion_points_count )
echo -n ,$( cat ${i}.paired.Q10.insertion_points_count )
echo -n ,$( cat ${i}.unpaired.Q10.insertion_points_count )
echo -n ,$( cat ${i}.paired.Q00.insertion_points_count )
echo -n ,$( cat ${i}.unpaired.Q00.insertion_points_count )
echo
fi
done >> HKLEPrimerAnalysisComplete.csv


echo "Sample #, raw paired read count, consolidated paired read count, sickle paired read count, paired endtoend concordant aligned, paired endtoend concordant aligned / sickle count, paired endtoend discordant aligned, paired endtoend discordant aligned / sickle count, paired endtoend individual reads aligned, paired endtoend individual reads aligned / sickle count, paired local concordant aligned, paired local concordant aligned / sickle count, paired local discordant aligned, paired local discordant aligned / sickle count, paired local individual reads aligned, paired local individual reads aligned / sickle count, unpaired endtoend individual reads aligned, unpaired endtoend individual reads aligned / sickle count, chimera Q20 paired insertion points found , chimera Q20 paired insertion points / sickle count , chimera Q20 unpaired insertion points found , chimera Q20 unpaired insertion points found / sickle count " > HKLEPrimerAnalysisSelect.csv
for i in $( seq 1 36 ) ; do
if [ -e ${i}.sickle.r1.fastq.gz ] ; then
echo -n $i
echo -n ,$( cat ${i}.r1.fastq.gz.read_count )
echo -n ,$( cat ${i}.consolidated.r1.fastq.gz.read_count )
sic=$( cat ${i}.sickle.r1.fastq.gz.read_count )
echo -n ,$sic
pce2e=$( awk '(/aligned con.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$pce2e
echo -n ,$( echo "scale=4; ${pce2e}/${sic}" | bc )
pde2e=$( awk '(/aligned dis.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$pde2e
echo -n ,$( echo "scale=4; ${pde2e}/${sic}" | bc )
pie2e=$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.e2e.err.txt )
echo -n ,$pie2e
echo -n ,$( echo "scale=4; ${pie2e}/${sic}" | bc )
pcloc=$( awk '(/aligned con.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$pcloc
echo -n ,$( echo "scale=4; ${pcloc}/${sic}" | bc )
pdloc=$( awk '(/aligned dis.*1 time/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$pdloc
echo -n ,$( echo "scale=4; ${pdloc}/${sic}" | bc )
piloc=$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.p.loc.err.txt )
echo -n ,$piloc
echo -n ,$( echo "scale=4; ${piloc}/${sic}" | bc )
uie2e=$( awk '(/aligned.*1 time/ && !/cord/){s+=$1}END{print s}' $i.bowtie2.SVAs_and_HERVs_KWHE.u.e2e.err.txt )
echo -n ,$uie2e
echo -n ,$( echo "scale=4; ${uie2e}/${sic}" | bc )
pip=$( cat ${i}.paired.Q20.insertion_points_count )
uip=$( cat ${i}.unpaired.Q20.insertion_points_count )
echo -n ,$pip
echo -n ,$( echo "scale=4; ${pip}/${sic}" | bc )
echo -n ,$uip
echo -n ,$( echo "scale=4; ${uip}/${sic}" | bc )
echo
fi
done >> HKLEPrimerAnalysisSelect.csv







Insertion points found / trimmed sample read count
# insertions per position
Sort tables numerically, not alphabetically


Unaligned reads  ( to SVA / HERV ) should be about half

