

/francislab/data1/raw/20211001-EV/SFHH008A_S1_L001_R1_001.fastq.gz



zcat /francislab/data1/raw/20211001-EV/SFHH008A_S1_L001_R2_001.fastq.gz | sed -n '2~4p' | grep "^TTTTTTTTTGTTTTTTTTTT" | head
zcat /francislab/data1/raw/20211001-EV/SFHH008A_S1_L001_R2_001.fastq.gz | sed -n '2~4p' | grep "^TTTTTCTTTGTTTTTTTTTT" | head
zcat /francislab/data1/raw/20211001-EV/SFHH008A_S1_L001_R2_001.fastq.gz | sed -n '2~4p' | grep "^TATATTTTTGTTTTTTTTTT" | head
zcat /francislab/data1/raw/20211001-EV/SFHH008A_S1_L001_R2_001.fastq.gz | sed -n '2~4p' | grep "^TTTTTTTTGGTTTTTTTTTT" | head


./process.bash



Filter reads based on quality
Filter reads based on R2's expected format of "^.........GTTT". Keep R2? Or just R1?
paste <( zcat out/SFHH008F_R1.fastq.gz | paste - - - - ) <( zcat out/SFHH008F_R2.fastq.gz | paste - - - - ) | head
consolidate
Trim R1 by polyA
Trim R1 by adapter


./report.bash > report.md
sed -e 's/ | /,/g' -e 's/ \?| \?//g' -e '/---/d' report.md > report.csv

for f in out/SFHH008?.quality.format.consolidate.R1.fastq.gz ; do
echo $f
b=$( basename $f .quality.format.consolidate.R1.fastq.gz )
zcat $f | paste - - - - | cut -f1 | cut -d' ' -f1 | cut -d'_' -f2 | sort -n > ${b}.umi_counts
done

for f in out/SFHH008?.quality.format.consolidate.trimmed.R1.fastq.gz ; do
echo $f
b=$( basename $f .quality.format.consolidate.trimmed.R1.fastq.gz )
zcat $f | paste - - - - | cut -f1 | cut -d' ' -f1 | cut -d'_' -f2 | sort -n > ${b}.trimmed.umi_counts
done



featureCounts -a mirna.gff -t miRNA_primary_transcript -g Name -o feature_counts.mirna.tsv out/*hg38.bam

featureCounts -a genes.gff -t transcript -g gene_name -o feature_counts.genes.tsv out/*hg38.bam





Compare R1 to RC or R2 ...

zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 2 | head
zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f 2 | head | rev | tr "[ACTG]" "[TGAC]"




paste <( zcat out/SFHH008A.quality.format.consolidate.trimmedpair.R1.fastq.gz | paste - - - - | cut -f 1 | head -20 ) <( zcat out/SFHH008A.quality.format.consolidate.trimmedpair.R1.fastq.gz | paste - - - - | cut -f 2 | head -20 ) <( zcat out/SFHH008A.quality.format.consolidate.trimmedpair.R2.fastq.gz | paste - - - - | cut -f 2 | head -20 | rev | tr "[ACTG]" "[TGAC]" ) | awk -F"\t" '{print $1;print $2;print $3; print ""}'


. @AAAAGACCT_1 1:N:0:TCGACAAG+GAACATCG
. AGACCAGGGAGGCTGAGGTGGGAGGATTGCTTGACCCCAGAAAGCAGAGGTTGCAGTGAGCTGAGACTGCACCACTGCACTCTAGCTTGGGCAACAGACAAGACTGAGAAAAAAGAAAGAAAAGAAAAAAACAGGTC
. AGACCAGGGAGGCTGAGGTGGGAGGATTGCTTGACCCCAGAAAGCAGAGGTTGCAGTGAGCTGAGACTGCACCACTGCACTCTAGCTTGGGCAACAGACAAGACTGAGAAAAAAGAAAGAAAAGAAAAAAA
. 
. @AAACATCGG_1 1:N:0:TCGACAAG+GAACATCG
. TGAGCCATGATCGCACCACTGCACTCCAGCCTGGGCATCAGAGCGAGACT
. GGAAAAAAAGAAATTAACAAAGAAGAAAAAAGAAAAA
. 
. @AAACATTAT_2 1:N:0:TCGACAAG+GAACATCG
.                                                       GCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTANTCACAGGAGGGAAAACATAATG
. CCGAGATCTACACGAACATCGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAGGCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTANTCACAGGAGGGAAAA
. 
. @AAAGACGAA_1 1:N:0:TCGACAAG+GAACATCG
. GCCCCAGCACTTTGGGAGGCCAGGAGTTCAAGACCAGCCTGGCAAACATGGCGAAATCCTGTCTACTAAAAATATAAAAAAATTAGTTGGGTGTGGTAGTGCACACCTGTAGTTGTAGCTACTCGAGAGGCTGAGGCATGAAAATCCAAGA
.                                                                                                                    TAGCTACTCGAGAGGCTGAGGCATGAAAATCCAAGAGGTTGGAGGCTGCAGTGAGCTGAGATCCAGCCACTGCACTCCAGCCTGGGCGACAGAGTGAGACTCTGTTTTAAACAAACAAACAAACAAACAAACAAAAACAAA
. 
. @AAATCCCAT_1 1:N:0:TCGACAAG+GAACATCG
. CCACTTCCAAATATTACAAAAAGAGTGTTTCAAACCTGCTGTATGAAGGGAAGTGTTCAACTCTATGAGTTGAATGCAAACATCACAGAGAAGTTTCTGAGAATGCTTCTGTCTTGATTTTATATGAAGATATTCCCGAAAAAAGAAACAT
.        CAAATATTACAAAAAGAGTGTTTCAAACCTGCTGTATGAAGGGAAGTGTTCAACTCTATGAGTTGAATGCAAACATCACAGAGAAGTTTCTGAGAATGCTTCTGTCTTGATTTTATATGAAGATATTCCCGAAAAAAGAAA
. 
. @AAATGCCCG_1 1:N:0:TCGACAAG+GAACATCG
. TGGGGAACCCGGGAAGCAGAGGTTTCAGTGAGCCGAGAGAGCGACACCGCACCGCAGCCTGGGTGACAGAGCGAGAGAGACTCAGTCCC
. GAAAGAAAAGAAGAAGAAGAAAAAAAGAAA
. 
. @AAATGGTCT_1 1:N:0:TCGACAAG+GAACATCG
. AGAGCTACCCACAGATGCTGAAGTTGAACTTCACATTCAGGGGTGAAAGCCTGTATTTTAGCCTTTGCCTTTGAGTGTCACTTATTCTAACCCCCATTCTTTCAACAAG
. GAAAAGGAAAAATAGAAA
. 
. @AAATGTCGT_1 1:N:0:TCGACAAG+GAACATCG
. GAGGCCCAAGTGGGTGGATCAAGAGGTCAAGAGATTGAGACCATCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATATAAAATTAGCCGGGCGTGGTGGTGCGTGCCTGTAGTCTCATCTACTCAGAAGGCTGAAGCAGGAGAAT
.                                                                                                                           ATCTACTCAGAAGGCTGAAGCAGGAGAATCGCTTGAACCCGGGAGGTGGAGGTTGCAGTGAGCTGAGATTGCACTGCTGCACTCCAGCCTGGTGACAGAGTGAGACTCCGAAGAAAAGAAAGAAAAAGAAAGAAAAGAAAA
. 
. @AACAATACA_1 1:N:0:TCGACAAG+GAACATCG
. CGGCATGTACCCCCGAACCTAAAATAAAAGTTGCAAAGGG
. ACTATATGCTGCACACAAGAGACACACTTTCACCTTAAGAATGCACATAGGCTTTCATCCCTCAAAGGGGATGAAAGAAGATATTCCTTGCAAATAATACCAACAGAGGACAGGGACAATACTTATTCTAGATAGAAAAAA
. 
. @AACATGTTG_1 1:N:0:TCGACAAG+GAACATCG
.                               CCACCATGGAATACTATGCAACCATAAAAAAGAATGAGTTAATGTCCTTTGCAGGGACATGGATGAAGCCGGAAGCCACAATTCTCAGCAAACTAACACACGAACAGAAAACCAACATGTT
. TCGGCAGCGTCAGATGTGTATAAGAGACAGCCACCATGGAATACTATGCAACCATAAAAAAGAATGAGTTAATGTCCTTTGCAGGGACATGGATGAAGCCGGAAGCCACAATTCTCAGCAAACTAACACACGAACAGAAAA
. 
. @AACCCCTAC_1 1:N:0:TCGACAAG+GAACATCG
. CCGGGAGGCAGAGGCTGTAGTGAGCTGAGATGCACTCCACTGCACTCCAGCCTGGGCGACAGAGCAACACTCCATCTC
. TAAAATAAGTAAAAAATAAAATAAAAAAA
. 
. @AACCTAGTT_1 1:N:0:TCGACAAG+GAACATCG
. TCAGCTGAGAATGAGCCACTGCCCTTCAGTCTGGGCAATAAAGCAAGAAGATAGAAAGAAAGAAAGAGAAAATGAGAGAGAGAGAGAGAGAAAGAGAGAGAAAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGA
.                                            CAAGAAGATAGAAAGAAAGAAAGAGAAAATGAGAGAGAGAGAGAGAGAAAGAGAGAGAAAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAGAAAAAAGAAAAGAAAAAA
. 
. @AACCTGCAA_1 1:N:0:TCGACAAG+GAACATCG
.                                                 GCTCCTGACCTCAGGTGATCTGCCTGCCTCGGCCTCCCAAAACGATTACAGGTGTGAGCCACTATGCCCTGCCGGCAACTGTAAATCTTAAAACTTGCAGGTT
. TCTACACGAACATCGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAGGCTCCTGACCTCAGGTGATCTGCCTGCCTCGGCCTCCCAAAACGATTACAGGTGTGAGCCACTATGCCCTGCCGGCAACTGTAAATCTTAAAA
. 
. @AACGGTTTG_1 1:N:0:TCGACAAG+GAACATCG
.                             TGGGATTTTACCTTCACAAGGTCAGGGTTTTCACAGAAGATATCTGAATAAGTAACACAACTAATAGGCACTGAGAAGACATTCAACATCATTAGTCACTAGGGAAATGAAAACCAAACCGTT
. GGCAGCGTCAGATGTGTATAAGAGACAGTGGGATTTTACCTTCACAAGGTCAGGGTTTTCACAGAAGATATCTGAATAAGTAACACAACTAATAGGCACTGAGAAGACATTCAACATCATTAGTCACTAGGGAAATGAAAA
. 
. @AACTCTCCC_1 1:N:0:TCGACAAG+GAACATCG
. GGGCCAAGGCAGGAGGATTGCTTGAGCCCAGGAGTTTGAGACCAGCCTGGGCAATATAGTGAGACCTCATCTTTA
. CAAGAAGAAAAGAAGAAAAAAAGAAA
. 
. @AACTCTTCG_1 1:N:0:TCGACAAG+GAACATCG
. AGGTTGCAGTGAGCCGAGATTGCACCACTGCACTCCAGCCTGGGTAACAGAGACTCTGTCTCAAAAAAAG
. GAAAGAAAGAAAGAAAAAA
. 
. @AAGACAGTG_1 1:N:0:TCGACAAG+GAACATCG
. GGGGAGGTGGGAGGATTGCTTGAGCCCAGGAGGTCGAGGCTACAGTGAGCCATGATAGCTCCACTGCACACCACCCTGGGTGACAAAGCAAGACCCTGTCTCAAAAAAGGAAAAAAGAAAGAAAAGAAAACCACTGTCTT
. GGGGAGGTGGGAGGATTGCTTGAGCCCAGGAGGTCGAGGCTACAGTGAGCCATGATAGCTCCACTGCACACCACCCTGGGTGACAAAGCAAGACCCTGTCTCAAAAAAGGAAAAAAGAAAGAAAAGAAAA
. 
. @AAGCATTTT_1 1:N:0:TCGACAAG+GAACATCG
. GCAGCAGATGGAGCCAAGTGTGTTGGCATGTACCTGTAATTGAAGCTACTCAGGAGGCTGAGGCAGCAGGATTGCTTGAGCCCAGGCATTTGAGTCTAGCCTGGGCAATGTAGCAAGACCCATCTC
. TTAAAAAAGAAAGATGGAAAAAAA
. 
. @AAGCGTGGG_2 1:N:0:TCGACAAG+GAACATCG
. AGAGAGAGCATGAACATGAATGAGTCTATGTCACTGCGACAGCAACAACAAAGGAAAGAAAGAAGGAAGGAAGGAAGGAAAGAAAAGGCATGTAGCCATGGAAGATGAAATAGAAAGAGAGAGGAAAATGTGGAAAGAGGTGGAGAAGAGA
.                                            AACAACAAAGGAAAGAAAGAAGGAAGGAAGGAAGGAAAGAAAAGGCATGTAGCCATGGAAGATGAAATAGAAAGAGAGAGGAAAATGTGGAAAGAGGTGGAGAAGAGAAAGAAAAANGAAAAGAAGAAGCTGCTGGAGAAA
. 
. @AAGGATCCT_1 1:N:0:TCGACAAG+GAACATCG
.                             GGGGCATAGAATGTTATTGTATAGGCACTCAGAGAATTTTTATGGAAGAAAGGGAGAAAATGAGGAAGAAATGGAGAAAGCAAAGGAGGAAAAAAAGGAGAAAAAAACAGGATCCTT
. GGCAGCGTCAGATGTGTATAAGAGACAGGGGGCATAGAATGTTATTGTATAGGCACTCAGAGAATTTTTATGGAAGAAAGGGAGAAAATGAGGAAGAAATGGAGAAAGCAAAGGAGGAAAAAAAGGAGAAAAAAA




paste <( zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f 2 ) <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 1 )  <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 2 ) | grep "^AAACATTAT" | awk -F"\t" '{print $2;print $3;print $1;print ""}'

paste <( zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f 2 ) <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 1 )  <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 2 ) | grep "^AAAGACGAA" | awk -F"\t" '{print $2;print $3;print $1;print ""}'


paste <( zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f 2 ) <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 1 )  <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 2 ) | grep "^AAACATTAT" | awk -F"\t" '{print $2;print $3;cmd="rev | tr \"[ACTG]\" \"[TGAC]\"";print $1 | cmd; close(cmd);print ""}'

paste <( zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f 2 ) <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 1 )  <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f 2 ) | grep "^AAAGACGAA" | awk -F"\t" '{print $2;print $3;cmd="rev | tr \"[ACTG]\" \"[TGAC]\"";print $1 | cmd; close(cmd);print ""}'




. @M07716:7:000000000-DCD8R:1:1102:7720:8991 1:N:0:TCGACAAG+GAACATCG
.                                                        GCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTAATCACAGGAGGGAAAAC ATAATGTTT CTGTCTCTTATACACATCTCCGAGCCCACGAGACTCGACAAGATCTCGTATGCCG
. ACCGAGATCTACACGAACATCGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAGGCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTAATCACAGGAGGGAAAAC ATAATGTTT
. 
. @M07716:7:000000000-DCD8R:1:1102:21209:10883 1:N:0:TCGACAAG+GAACATCG
.                                                        GCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTAGTCACAGGAGGGAAAAC ATAATGTTT CTGTCTCTTATACACATCTCCGAGCCCACGAGACTCGACAAGATCTCGTATGCCG
. ACCGAGATCTACACGAACATCGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAGGCGGCACATTGTTGAGGGGGAACTGAACATTTGTGCATTGCCCAGATAACACCACACAGATTACCTTGTAGTCACAGGAGGGAAAAC ATAATGTTT
. 
. 
. @M07716:7:000000000-DCD8R:1:1102:27978:13342 1:N:0:TCGACAAG+GAACATCG
. GCCCCAGCACTTTGGGAGGCCAGGAGTTCAAGACCAGCCTGGCAAACATGGCGAAATCCTGTCTACTAAAAATATAAAAAAATTAGTTGGGTGTGGTAGTGCACACCTGTAGTTGTAGCTACTCGAGAGGCTGAGGCATGAAAATCCAAGA
.                                                                                                                    TAGCTACTCGAGAGGCTGAGGCATGAAAATCCAAGAGGTTGGAGGCTGCAGTGAGCTGAGATCCAGCCACTGCACTCCAGCCTGGGCGACAGAGTGAGACTCTGTTTTAAACAAACAAACAAACAAACAAACAAAAACAAAC TTCGTCTTT









~/.local/pear-0.9.11-linux-x86_64/bin/pear -f SFHH008E_R1.fastq -r SFHH008E_R2.fastq -o test

head SFHH008E_R?.fastq test.assembled.fastq 

paste <( cat test.assembled.fastq | paste - - - - | cut -f 2 ) <( cat SFHH008E_R1.fastq | paste - - - - | cut -f 2 ) <( cat SFHH008E_R2.fastq | paste - - - - | cut -f 2 ) | head | awk -F"\t" '{print $1;print $2;print $3;print ""}'


paste <( cat test.assembled.fastq | paste - - - - | cut -f 2 ) <( cat SFHH008E_R1.fastq | paste - - - - | cut -f 2 ) <( cat SFHH008E_R2.fastq | paste - - - - | cut -f 2 | rev | tr "ACTG" "TGAC" ) | head | awk -F"\t" '{print "AS: "$1;print "R1: "$2;print "R2: "$3;print ""}'

kinda sucks? or reads out of order?


~/github/jsh58/NGmerge/NGmerge -1 SFHH008E_head_R1.fastq -2 SFHH008E_head_R2.fastq -o test
Sucks. Obvious same length RC don't "merge"?



R1: GACACCTAAGGTGATTCACCCTCCTCAGCCTCCCATGGTGCTTGGANTACAGGTGTGAACTACTGTGCCTGCACAAACCAGAACCTCTTTAAAGCATAAATCACACAAGACCTAT
R2:               TTCACCCTCCTCAGCCTCCCATGGTGCTTGGANTACAGGTGTGAACTACTGTGCCTGCACAAACCAGAACCTCTTTAAAGCATAAATCACACAAGACCTATCAAAC
AS: GACACCTAAGGTGATTCACCCTCCTCAGCCTCCCATGGTGCTTGGANTACAGGTGTGAACTACTGTGCCTGCACAAACCAGAACCTCTTTAAAGCATAAATCACACAAGACCTATCAAAC

R1: TGCCATGAACTCAGGAGGCAGAGGTTGCAGTGAGCCGAGATCACGCCACTGCACTCCAGCCTGGGCGACAGACCAAGACTCCATC
R2: TGCCATGAACTCAGGAGGCAGAGGTTGCAGTGAGCCGAGATCACGCCACTGCACTCCAGCCTGGGCGACAGACCAAGACTCC
AS: TGCCATGAACTCAGGAGGCAGAGGTTGCAGTGAGCCGAGATCACGCCACTGCACTCCAGCCTGGGCGACAGACCAAGACTCC

R1: TGCCTCCCACCTCCACCTTCAAAAGTGCTGGGATTATAGGTGTGAGCCCACCATGCCTGGCCTTGAAGGTACTAGTTTTTAGAGATGGTTCAACAGC
R2: TGCCTCCCACCTCCACCTTCAAAAGTGCTGGGATTATAGGTGTGAGCCCACCATGCCTGGCCTTGAAGGTACTAGTTTTTAGAGATGGTTC
AS: TGCCTCCCACCTCCACCTTCAAAAGTGCTGGGATTATAGGTGTGAGCCCACCATGCCTGGCCTTGAAGGTACTAGTTTTTAGAGATGGTTC

~/.local/pear-0.9.11-linux-x86_64/bin/pear -f SFHH008E_R1.fastq -r SFHH008E_R2.fastq -o test




for r1 in out/SFHH008[A-E].quality.format.consolidate.t1.t2.t3.R1.fastq.gz; do
echo $r1
r2=${r1/.R1./.R2.}
echo $r2
o=${r1%.R1.fastq.gz}
~/.local/pear-0.9.11-linux-x86_64/bin/pear --forward-fastq ${r1} --reverse-fastq ${r2} --output ${o} --min-assembly-length 10
done

\rm -f out/*fastq.read_count.txt
count_fasta_reads.bash out/*fastq

for r1 in out/SFHH008[A-E].quality.format.consolidate.t1.t2.t3.R1.fastq.gz.read_count.txt ; do
echo $r1
ac=$( cat ${r1%.R1.fastq.gz.read_count.txt}.assembled.fastq.read_count.txt )
r1c=$( cat $r1 )
echo $ac / $r1c
done

for r1 in out/SFHH008[A-E].quality.format.consolidate.t1.t2.t3.unassembled.forward.fastq ; do
echo $r1
r2=${r1/forward/reverse}
paste <( cat ${r1} | paste - - - - | cut -f 2 ) <( cat ${r2} | paste - - - - | cut -f 2 | rev | tr "ACTG" "TGAC" ) | awk -F"\t" '{print "R1: "$1;print "R2: "$2;print ""}'
done

for f in out/*assembled.fastq ; do
cat $f | paste - - - - | cut -f2 | awk '{print length($0)}' | sort -n > ${f}.read_lengths.txt
cat $f | paste - - - - | cut -f2 | awk '{print length($0)}' | sort -n | uniq -c > ${f}.read_length_counts.csv
done
cat out/*assembled.fastq | paste - - - - | cut -f2 | awk '{print length($0)}' | sort -n > read_lengths.txt


./distributions2.py out/*assembled.fastq.read_length_counts.csv
./distributions3.py out/*assembled.fastq.read_lengths.txt read_lengths.txt



Are reads with the same UMI actually the same?

for umi in $( zcat out/SFHH008A.quality.format.consolidate.R2.fastq.gz | paste - - - - | cut -f1 | cut -f1 -d' ' | sed 's/^@//' | awk -F_ '($2>2){print $1}' ) ; do
echo $umi
zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f2 | grep "^${umi}"
paste <( zcat out/SFHH008A.quality.format.R2.fastq.gz | paste - - - - | cut -f2 ) <( zcat out/SFHH008A.quality.format.R1.fastq.gz | paste - - - - | cut -f2 ) | grep "^${umi}" | awk '{print $2}'
done




```
BOX="https://dav.box.com/dav/Francis _Lab_Share/20211001-EV"
curl -netrc -X MKCOL "${BOX}/"
BOX="https://dav.box.com/dav/Francis _Lab_Share/20211001-EV/20211003-explore"
curl -netrc -X MKCOL "${BOX}/"

for f in out/SFHH008?.quality.format.R?.fastq.gz ; do
curl -netrc -T $f "${BOX}/"
done
```




